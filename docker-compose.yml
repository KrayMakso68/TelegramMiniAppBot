version: '3.8'

services:
  frontend:
    container_name: frontend
    build:
      context: ./tgbot_client
      dockerfile: Dockerfile
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - pgadmin
      - fastapi
    restart: always
    networks:
      - app-network

  bot:
    container_name: bot
    build:
      context: ./tgbot_main
      dockerfile: Dockerfile
    restart: always

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"

      PROXY_X_FOR_COUNT: 1

      # Number of values to trust for X-Forwarded-Proto.
      PROXY_X_PROTO_COUNT: 0

      # Number of values to trust for X-Forwarded-Host.
      PROXY_X_HOST_COUNT: 0

      # Number of values to trust for X-Forwarded-Port.
      PROXY_X_PORT_COUNT: 1

      # Number of values to trust for X-Forwarded-Prefix.
      PROXY_X_PREFIX_COUNT: 0
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - app-network

  fastapi:
    container_name: fastapi
    build:
      context: ./tgbot_server
      dockerfile: Dockerfile
    depends_on:
      - postgres
    command: >
      sh -c "/wait-for-it.sh postgres:5432 -- alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    networks:
      - app-network
#
#volumes:
#  postgres_data:

networks:
  app-network:
    driver: bridge